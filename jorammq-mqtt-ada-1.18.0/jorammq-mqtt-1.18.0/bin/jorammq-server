#!/bin/bash
# (C) 2014 - 2023 ScalAgent Distributed Technologies
# All rights reserved

# Since JoramMQ 1.15 the configuration is automatically updated at each restart.
# If you want keep the old behavior set the UPDATE_CONF_AUTO variable below to any
# value other than OK
UPDATE_CONF_AUTO=OK

JVM_PROPERTIES="-server -Xmx2G"

# --------------------------------------------------------------------------------
# Set JORAMMQ_MQTT_HOME if not defined
PRG="$0"
while [ -h "$PRG" ] ; do
  ls=`ls -ld "$PRG"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '/.*' > /dev/null; then
    PRG="$link"
  else
    PRG=`dirname "$PRG"`/"$link"
  fi
done
PRGDIR=`dirname "$PRG"`

if [ -z "$JORAMMQ_MQTT_HOME" ]; then
  echo The JORAMMQ_MQTT_HOME environment variable is not defined.
  [ -z "$JORAMMQ_MQTT_HOME" ] && export JORAMMQ_MQTT_HOME=`cd "$PRGDIR/.." >/dev/null; pwd`
fi

if [ ! -z "$JORAMMQ_MQTT_HOME" ]; then
  if [ ! -d "$JORAMMQ_MQTT_HOME" ]; then
    echo "The JORAMMQ_MQTT_HOME environment variable is not defined correctly: $JORAMMQ_MQTT_HOME"
    exit 1
  fi
else
  echo "JORAMMQ_MQTT_HOME is not defined"
  exit 1
fi

# set environment
source "$JORAMMQ_MQTT_HOME/bin/setenv.sh"
# --------------------------------------------------------------------------------

MQTT_PID_FILE="$JORAMMQ_PID_DIR/jorammq-mqtt.pid"
is_running() {
  if [ ! -f ${MQTT_PID_FILE} ]
  then
    return 1;
  fi
  ret=`pgrep -F ${MQTT_PID_FILE}`
  if [ -z "$ret" ]
  then
    return 1;
  fi
  return 0;
}

# Fixes JVM Properties for JAVA >= 10
#JAVA_MAJOR=$(java -version 2>&1 | grep -i version | sed 's/.*version "\(.*\)\.\(.*\)\..*/\1/; 1q' | sed 's/\r//')
#if [ "$JAVA_MAJOR" -gt 1 ]; then
#    JVM_PROPERTIES="$JVM_PROPERTIES --add-modules java.se.ee --illegal-access=warn"
#fi

if [ -z "$CLASSPATH" ]; then
	CLASSPATH=$FELIX_JAR
else
	CLASSPATH=$CLASSPATH:$FELIX_JAR
fi

if [ "$UPDATE_CONF_AUTO"=="OK" ]; then
  if [ -d "$STORAGE_DIR" ]; then
    echo Removes OSGi cache directory and updates JoramMQ configuration
    if [ -d "$FELIX_ROOT_DIR" ]; then
      rm -rf "$FELIX_ROOT_DIR" 2>/dev/null 1>/dev/null
    fi
    if [ -d "$FELIX_ROOT_DIR" ]; then
      echo Cannot remove OSGi cache, probably the server is already running
      exit 1
    fi
    # Variable avoiding duplicate messages during environment setting
    $JORAMMQ_MQTT_HOME/bin/jorammq-admin -update
    if [ $? -ne 0 ]; then
      exit 1
    fi
  fi
fi

if [ ! -z $JMX_PORT ]; then
  JMX_PROPERTIES="-Dcom.sun.management.jmxremote.port=$JMX_PORT -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote"

# The options below allows JMX to connect to a broker in a Docker container.
# Using localhost allows connections from the local machine, using the hostname
# or IP address allows remote connections.

#  JMX_PROPERTIES="-Djava.rmi.server.hostname=<hostname or localhost> -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=${JMX_PORT} -Dcom.sun.management.jmxremote.rmi.port=${JMX_PORT} -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
  echo JMX listening to port $JMX_PORT
fi

echo Launching JoramMQ MQTT server $SERVER_ID data_dir:$JORAMMQ_DATA_DIR

is_running > /dev/null 2>&1
if [ $? -eq 0 ]
then
  echo "JoramMQ MQTT server already running (pid $ret)"
  exit 1
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  JAVA_HOME=`cygpath --absolute --windows "$JAVA_HOME"`
  FELIX_CONF_FILE=`cygpath --absolute --windows "$FELIX_CONF_FILE"`
  FELIX_ROOT_DIR=`cygpath --absolute --windows "$FELIX_ROOT_DIR"`
  STORAGE_DIR=`cygpath --absolute --windows "$STORAGE_DIR"`
  CONFIG_DIR=`cygpath --absolute --windows "$CONFIG_DIR"`
  CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
fi

if [ -z "$JORAMMQ_IN_DOCKER" ]; then
  cd "$SERVER_RUN_DIR"; exec "$JAVA" $JVM_PROPERTIES $JORAMMQ_JAVA_OPTS $JORAMMQ_TMP_DIR_OPT \
   -Dgosh.args=--nointeractive -Dfelix.config.properties=file:"$FELIX_CONF_FILE" \
   -Dfelix.cache.rootdir="$FELIX_ROOT_DIR" -Dfr.dyade.aaa.agent.AgentServer.id=$SERVER_ID \
   -Dfr.dyade.aaa.agent.AgentServer.storage="$STORAGE_DIR" -Dfr.dyade.aaa.osgi.exit=true -Dfr.dyade.aaa.agent.A3CONF_DIR="$CONFIG_DIR" \
   -Dcom.scalagent.jorammq.mqtt.adapter.data.path="$JORAMMQ_DATA_DIR/jorammq-swap" \
   -Dfr.dyade.aaa.agent.A3CONF_FILE=jorammq.xml -Dfr.dyade.aaa.agent.useDefaultConfiguration=false \
   -Dfr.dyade.aaa.DEBUG_DIR="$CONFIG_DIR" -Dfr.dyade.aaa.DEBUG_FILE=log.properties \
   $JMX_PROPERTIES \
   -classpath "$CLASSPATH" org.apache.felix.main.Main &
  echo "$!" > "$MQTT_PID_FILE"
else
  cd "$SERVER_RUN_DIR"; exec "$JAVA" $JVM_PROPERTIES $JORAMMQ_JAVA_OPTS $JORAMMQ_TMP_DIR_OPT \
   -Dgosh.args=--nointeractive -Dfelix.config.properties=file:"$FELIX_CONF_FILE" \
   -Dfelix.cache.rootdir="$FELIX_ROOT_DIR" -Dfr.dyade.aaa.agent.AgentServer.id=$SERVER_ID \
   -Dfr.dyade.aaa.agent.AgentServer.storage="$STORAGE_DIR" -Dfr.dyade.aaa.osgi.exit=true -Dfr.dyade.aaa.agent.A3CONF_DIR="$CONFIG_DIR" \
   -Dcom.scalagent.jorammq.mqtt.adapter.data.path="$JORAMMQ_DATA_DIR/jorammq-swap" \
   -Dfr.dyade.aaa.agent.A3CONF_FILE=jorammq.xml -Dfr.dyade.aaa.agent.useDefaultConfiguration=false \
   -Dfr.dyade.aaa.DEBUG_DIR="$CONFIG_DIR" -Dfr.dyade.aaa.DEBUG_FILE=log.properties \
   $JMX_PROPERTIES \
   -classpath "$CLASSPATH" org.apache.felix.main.Main
fi
